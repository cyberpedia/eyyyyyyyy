@startuml
title CTF Platform ERD (v1.1)

hide circle
skinparam linetype ortho
skinparam packageStyle rectangle
skinparam class {
  BackgroundColor White
  BorderColor Black
}

entity "User" as User {
  *id: UUID
  --
  username: string
  email: string
  pw_hash: string
  roles: string[] // Player, Captain, Moderator, Admin
  two_fa_enabled: bool
  profile: jsonb
  created_at: timestamptz
}

entity "Team" as Team {
  *id: UUID
  --
  name: string
  slug: string
  captain_user_id: UUID
  bio: text
  created_at: timestamptz
}

entity "Membership" as Membership {
  *user_id: UUID
  *team_id: UUID
  --
  role: string // member|captain
  joined_at: timestamptz
}

entity "Event" as Event {
  *id: UUID
  --
  name: string
  start_at: timestamptz
  end_at: timestamptz
  freeze_at: timestamptz
  scoreboard_public: bool
  verification_mode: string // none|manual|auto
}

entity "Category" as Category {
  *id: UUID
  --
  name: string
  slug: string
}

entity "Challenge" as Challenge {
  *id: UUID
  --
  event_id: UUID
  title: string
  slug: string
  description: text
  category_id: UUID
  scoring_model: string // static|dynamic
  points_min: int
  points_max: int
  k: numeric
  is_dynamic: bool
  status: string // draft|published
  release_at: timestamptz
}

entity "Tag" as Tag {
  *id: UUID
  --
  name: string
}

entity "ChallengeTagMap" as ChallengeTagMap {
  *challenge_id: UUID
  *tag_id: UUID
}

entity "Hint" as Hint {
  *id: UUID
  --
  challenge_id: UUID
  content: text
  cost_points: int
  order: int
}

entity "Attachment" as Attachment {
  *id: UUID
  --
  challenge_id: UUID
  object_key: string
  filename: string
  checksum: string
  size: bigint
}

entity "Dependency" as Dependency {
  *id: UUID
  --
  type: string // challenge|category
  target_challenge_id: UUID
  requirement_id: UUID
  threshold: int
  relation: string // all|any
}

entity "Submission" as Submission {
  *id: UUID
  --
  user_id: UUID
  team_id: UUID
  challenge_id: UUID
  is_correct: bool
  flag_prefix: string
  ip: inet
  user_agent: text
  created_at: timestamptz
}

entity "ScoreEvent" as ScoreEvent {
  *id: UUID
  --
  team_id: UUID
  user_id: UUID
  challenge_id: UUID
  type: string // solve|first_blood|bonus|writeup_bonus|badge
  delta: int
  created_at: timestamptz
  metadata: jsonb
}

entity "LeaderboardSnapshot" as LeaderboardSnapshot {
  *id: UUID
  --
  event_id: UUID
  created_at: timestamptz
  data: jsonb
  signature: string
}

entity "WriteUp" as WriteUp {
  *id: UUID
  --
  user_id: UUID
  team_id: UUID
  challenge_id: UUID
  content: text // markdown or TipTap JSON
  status: string // pending|approved|rejected
  bonus_points_awarded: int
  created_at: timestamptz
  published_at: timestamptz
}

entity "InstanceTemplate" as InstanceTemplate {
  *id: UUID
  --
  challenge_id: UUID
  image_ref: string
  limits_cpu_m: int
  limits_mem_mb: int
  env_schema: jsonb
  health_probe: jsonb
  network_policy_ref: string
  idle_timeout_minutes: int
}

entity "Instance" as Instance {
  *id: UUID
  --
  template_id: UUID
  owner_team_id: UUID
  event_id: UUID
  namespace: string
  pod_name: string
  status: string
  created_at: timestamptz
  last_active_at: timestamptz
  cpu_millicores: int
  mem_mb: int
  secret_name: string
}

entity "Notification" as Notification {
  *id: UUID
  --
  user_id: UUID
  type: string
  payload: jsonb
  read_at: timestamptz
}

entity "AuditLog" as AuditLog {
  *id: UUID
  --
  actor_user_id: UUID
  actor_team_id: UUID
  action: string
  target_type: string
  target_id: UUID
  timestamp: timestamptz
  ip: inet
  data: jsonb
  prev_hash: string
  hash: string
}

entity "ContentPage" as ContentPage {
  *id: UUID
  --
  slug: string
  title: string
  content: text // markdown or TipTap JSON
  version: int
  published: bool
}

' Relationships
User ||--o{ Membership : has
Team ||--o{ Membership : has
User ||--o{ Submission : created
Team ||--o{ Submission : has
Event ||--o{ Challenge : contains
Category ||--o{ Challenge : classifies
Challenge ||--o{ Hint : offers
Challenge ||--o{ Attachment : files
Challenge ||--o{ Submission : has
Challenge ||--o{ WriteUp : has
Challenge ||--o{ ChallengeTagMap : tags
Tag ||--o{ ChallengeTagMap : in
Team ||--o{ ScoreEvent : accrues
User ||--o{ ScoreEvent : by
Event ||--o{ LeaderboardSnapshot : has
InstanceTemplate ||--o{ Instance : spawns
Team ||--o{ Instance : owns
User ||--o{ Notification : receives
User ||--o{ AuditLog : performs
ContentPage ||--|| Event : content_for (0..*) ' conceptual link
Team ||--|| User : captain_user_id (note) ' captain reference

@enduml